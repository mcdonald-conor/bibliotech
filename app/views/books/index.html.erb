<!DOCTYPE html>
<html>
<head>
  <title>My Library</title>
  <%= stylesheet_link_tag 'my_library', media: 'all' %>
  <%= csrf_meta_tags %>
  <%= csp_meta_tag %>
  <%= javascript_include_tag 'https://cdn.jsdelivr.net/npm/sweetalert2@11' %>
  <%= stylesheet_link_tag 'https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css' %>
</head>

<body>

  <header>
    <div class="filter-buttons">
      <button data-filter="all">all books</button>
      <button data-filter="Read">read</button>
      <button data-filter="Currently Reading">currently reading</button>
      <button data-filter="Favorite">favourites</button>
    </div>
  </header>

  <% if @books.any? %>
    <div class="library-container">
      <% @books.each do |book| %>
        <div class="library-card" data-category="none" data-original-category="none">
          <% if book.cover_url.present? %>
            <div class="library-card-content">
              <div class="book-cover-container">
                <%= image_tag book.cover_url, alt: "Book cover", class: "book-cover" %>
                <div class="hover-instruction"><i class="fas fa-arrow-up"></i>categorise</div>
                <div class="dropdown-menu">
                  <button data-category="Read">mark as read</button>
                  <button data-category="Currently Reading">add to currently reading</button>
                  <button data-category="Favorite">favourite</button>
                </div>
              </div>
              <div class="book-info">
                <div class="title-author">
                  <span class="book-title"><%= book.title %></span>
                  <span class="book-author">by <%= book.author %></span>
                </div>
                <div class="book-details">
                  <%= book.description %><br>
                  <strong>Source:</strong> <%= book.source %><br>
                  <strong>ISBN:</strong> <%= book.isbn %><br>
                </div>
                <div class="book-rating-container">
                  <div class="book-rating" data-rating="0">
                    <span class="star" data-value="1">&#9733;</span>
                    <span class="star" data-value="2">&#9733;</span>
                    <span class="star" data-value="3">&#9733;</span>
                    <span class="star" data-value="4">&#9733;</span>
                    <span class="star" data-value="5">&#9733;</span>
                  </div>
                  <%= link_to book_path(book), data: { turbo_method: :delete, turbo_confirm: "Are you sure?" }, class: 'delete-link' do %>
                    <i class="fa fa-trash" aria-hidden="true" style="background: none; border: none; outline: none;"></i>
                  <% end %>
                </div>
              </div>
            </div>
          <% end %>
        </div>
      <% end %>
    </div>
  <% else %>
    <p>No books found in your library.</p>
  <% end %>

  <script>
    document.addEventListener('DOMContentLoaded', () => {
      document.querySelectorAll('.filter-buttons button').forEach(button => {
        button.addEventListener('click', () => {
          const filter = button.getAttribute('data-filter')
          document.querySelectorAll('.library-card').forEach(card => {
            const category = card.getAttribute('data-category')
            const originalCategory = card.getAttribute('data-original-category')
            if (filter === 'all' || category === filter || originalCategory === filter || (filter === 'Rated' && card.getAttribute('data-rating') > 0)) {
              card.style.display = 'block'
            } else {
              card.style.display = 'none'
            }
          })
        })
      })

      document.querySelectorAll('.dropdown-menu button').forEach(button => {
        button.removeEventListener('click', handleDropdownClick) // Remove any existing listener
        button.addEventListener('click', handleDropdownClick) // Add the new listener
      })

      document.querySelectorAll('.star').forEach(star => {
        star.addEventListener('mouseover', handleStarHover)
        star.addEventListener('mouseout', handleStarHoverOut)
        star.addEventListener('click', handleStarClick)
      })

      function handleDropdownClick(event) {
        const category = event.currentTarget.getAttribute('data-category')
        const bookCard = event.currentTarget.closest('.library-card')
        if (category) {
          bookCard.setAttribute('data-category', category)
          bookCard.setAttribute('data-original-category', category)

          Swal.fire({
            title: 'Success!',
            text: `Book category updated to ${category}`,
            icon: 'success',
            confirmButtonText: 'OK'
          })
        }
      }

      function handleStarHover(event) {
        const value = event.target.getAttribute('data-value')
        const bookCard = event.currentTarget.closest('.library-card')
        const stars = bookCard.querySelectorAll('.star')
        stars.forEach(star => {
          if (star.getAttribute('data-value') <= value) {
            star.classList.add('hover')
          } else {
            star.classList.remove('hover')
          }
        })
      }

      function handleStarHoverOut(event) {
        const bookCard = event.currentTarget.closest('.library-card')
        const stars = bookCard.querySelectorAll('.star')
        stars.forEach(star => {
          star.classList.remove('hover')
        })
      }

      function handleStarClick(event) {
        const bookCard = event.currentTarget.closest('.library-card')
        const category = bookCard.getAttribute('data-category')

        if (category === 'Read' || category === 'Favorite') {
          const value = event.target.getAttribute('data-value')
          const ratingDiv = bookCard.querySelector('.book-rating')
          ratingDiv.setAttribute('data-rating', value)
          updateStarRating(ratingDiv, value)
          Swal.fire({
            title: 'Success!',
            text: `You rated this book ${value} stars`,
            icon: 'success',
            confirmButtonText: 'OK'
          })
          bookCard.setAttribute('data-rating', value)
          bookCard.setAttribute('data-category', 'Rated')
        } else {
          Swal.fire({
            title: 'Error',
            text: 'You can only rate a book if it is marked as read or in your favourites!',
            icon: 'error',
            confirmButtonText: 'OK'
          })
        }
      }

      function updateStarRating(ratingDiv, rating) {
        const stars = ratingDiv.querySelectorAll('.star')
        stars.forEach(star => {
          if (star.getAttribute('data-value') <= rating) {
            star.classList.add('selected')
          } else {
            star.classList.remove('selected')
          }
        })
      }

      // Initialize ratings
      document.querySelectorAll('.library-card').forEach(card => {
        const rating = card.getAttribute('data-rating')
        if (rating) {
          const ratingDiv = card.querySelector('.book-rating')
          updateStarRating(ratingDiv, rating)
        }
      })
    })
  </script>
</body>
</html>
